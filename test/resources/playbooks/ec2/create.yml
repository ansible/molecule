---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    molecule_file: "{{ lookup('env','MOLECULE_FILE') }}"
    molecule_instance_config: "{{ lookup('env','MOLECULE_INSTANCE_CONFIG') }}"
    molecule_yml: "{{ lookup('file', molecule_file) | from_yaml }}"

    ssh_port: 22

    security_group_name: molecule
    security_group_description: Security group for testing Molecule
    security_group_rules:
      - { proto: 'tcp', from_port: "{{ ssh_port }}", to_port: "{{ ssh_port }}",
          cidr_ip: '0.0.0.0/0' }
      - { proto: 'icmp', from_port: 8, to_port: -1, cidr_ip: '0.0.0.0/0' }
    security_group_rules_egress:
      - { proto: -1, from_port: 0, to_port: 0, cidr_ip: '0.0.0.0/0' }

    keypair_name: molecule_key
    keypair_path: /tmp/molecule_aws_ssh_key

    ec2:
      image: ami-a5b196c0
      instance_type: t2.micro
      vpc_subnet_id: subnet-6456fd1f
  tasks:
    - include: security_groups.yml
    - include: keypair.yml

    - name: Create molecule instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ ec2.image }}"
        instance_type: "{{ ec2.instance_type }}"
        vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
        group: "{{ security_group_name }}"
        instance_tags:
          instance: "{{ item.name | instance_with_scenario_name(molecule_yml.scenario.name) }}"
        wait: yes
        assign_public_ip: yes
        exact_count: 1
        count_tag:
          instance: "{{ item.name | instance_with_scenario_name(molecule_yml.scenario.name) }}"
      register: server
      with_items: "{{ molecule_yml.platforms }}"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ server.results[0].instances[0].tags.instance }}",
          'address': "{{ server.results[0].instances[0].public_dns_name }}",
          'user': 'ubuntu',
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}",
          'instance_ids': "{{ server.results[0].instance_ids }}",}
      with_items: "{{ server.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "# Molecule managed\n\n{{ instance_conf | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
      with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
