[tox]
minversion = 4.2.2
envlist =
    lint
    docs
    pkg
    # do not put specific python versions here, but use them when calling tox
    py
    py-{devel}

# do not enable skip missing to avoid CI false positives
skip_missing_interpreters = False
isolated_build = True

[testenv]
# both options needed to workaround https://github.com/tox-dev/tox/issues/2197
usedevelop = true
skip_install = false

# do not put * in passenv as it may break builds do to reduced isolation
passenv =
    CI
    CONTAINER_*
    DISPLAY
    DOCKER_*
    GITHUB_*
    HOME
    PIP_*
    PODMAN_*
    PUBLISH
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
setenv =
    ANSIBLE_CONFIG={toxinidir}/.ansible.cfg
    ANSIBLE_DISPLAY_FAILED_STDERR=1
    ANSIBLE_NOCOWS=1
    ANSIBLE_VERBOSITY=1
    COVERAGE_FILE={env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    MOLECULE_NO_LOG=0
    PIP_CONSTRAINT = {toxinidir}/.config/requirements.txt
    devel: PIP_CONSTRAINT=/dev/null
    PIP_DISABLE_PIP_VERSION_CHECK=1
    PYTHONDONTWRITEBYTECODE=1
    PYTHONUNBUFFERED=1
    # Temporare remove "-n auto" as it seems to break coverage on this project.
    _EXTRAS=-l
deps =
    devel: git+https://github.com/ansible/ansible#egg=ansible-core
    # pytest-molecule not used but we want to check that it does not conflict
    devel: git+https://github.com/ansible-community/pytest-molecule#egg=pytest-molecule
extras =
    test
commands =
    ansibledevel: ansible-galaxy install git+https://github.com/ansible-collections/community.general.git
    # failsafe as pip may install incompatible dependencies
    pip check
    # failsafe for preventing changes that may break pytest collection
    sh -c "PYTEST_ADDOPTS= python -m pytest -p no:cov --collect-only >>/dev/null"
    sh -c "rm -f .tox/.coverage.*"
    # html report is used by Zuul CI to display reports
    coverage run -m pytest {env:_EXTRAS} {env:PYTEST_ADDOPTS:} {posargs}

allowlist_externals =
    find
    rm
    sh

[testenv:lint]
description = Runs all linting tasks
# python pinned in order to have pip-compile output reproducible
basepython = python3.9
commands =
    # to run a single linter you can do "pre-commit run flake8"
    python -m pre_commit run {posargs:--all --show-diff-on-failure}
deps =
    pre-commit>=2.21.0
    check-jsonschema>=0.20.0
    jsonschema>=4.17.3
setenv =
  {[testenv]setenv}
  # without his upgrade would likely not do anything
  PIP_CONSTRAINT = /dev/null
skip_install = true
usedevelop = false

[testenv:deps]
description = Bump all test dependencies
skip_install = true
deps = {[testenv:lint]deps}
setenv = {[testenv:lint]setenv}
commands =
  # manual hook calls the optional pip-compile-upgrade hook after pip-compile
  {[testenv:lint]commands} --hook-stage manual pip-compile
  # Update pre-commit hooks
  -pre-commit autoupdate
  # We fail if files are modified at the end
  git diff --exit-code
allowlist_externals =
    git

[testenv:docs]
description = Build documentation
passenv = *
usedevelop = true
commands =
    mkdocs build --strict
    linkchecker -f linkcheckerrc site
extras =
    docs

[testenv:pkg]
description =
    Do packaging/distribution. If tag is not present or PEP440 compliant upload to
    PYPI could fail
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install molecule itself in this env
skip_install = true
deps =
    build >= 0.9.0
    twine >= 4.0.2  # pyup: ignore
setenv =
commands =
    rm -rfv {toxinidir}/dist/
    python -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    # metadata validation
    sh -c "python -m twine check --strict {toxinidir}/dist/*"

[testenv:snap]
description = Builds a snap package
usedevelop = false
skip_install = true
commands =
    sh -c "type snapcraft && snapcraft build"

[testenv:eco]
description = Smoketest of combining all known to be maintained plugins (ecosystem)
pip_pre = true
usedevelop = true
extras =
    test
deps =
    molecule-plugins[azure,containers,docker,ec2,gce,podman,vagrant]>=23.0.0
    tox-ansible >= 1.5.1
    pipdeptree >= 2.0.0
commands =
    pip check
    # disabled fails safe because we now install ansible-core on purpose
    # as the preinstalled version of ansible from github, cannot be called
    # when a virtualenv is activated.
    # fail-safe: stop if ansible can be imported, it means it was dragged in
    # python -c "import importlib, sys; sys.exit(importlib.util.find_spec('ansible') != None)"
    pipdeptree --reverse -e pip,pbr,six,setuptools,toml,urllib3
    molecule --version
    molecule drivers
    bash ./tools/smoketest.sh
allowlist_externals =
    bash

[testenv:coverage]
description = Combines and displays coverage results
commands =
  -sh -c "coverage combine --append .tox/.coverage.*"
  # needed by codecov github actions:
  coverage xml -i
  # just for humans running it:
  coverage report -i
deps =
  coverage[toml]
