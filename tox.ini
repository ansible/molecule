[tox]
minversion = 3.9.0
envlist =
    lint
    check
    py{27,35,36,37}-ansible{25,26,27,28}-{functional,unit}
    doc
skipdist = True
skip_missing_interpreters = True
isolated_build = True

[testenv]
# Hotfix for https://github.com/pypa/pip/issues/6434
# Based on https://github.com/jaraco/skeleton/commit/123b0b2
# Check https://github.com/tox-dev/tox/issues/1276 for the final solution
install_command =
    python -c 'import subprocess, sys; pip_inst_cmd = sys.executable, "-m", "pip", "install"; subprocess.check_call(pip_inst_cmd + ("pip<19.1", )); subprocess.check_call(pip_inst_cmd + tuple(sys.argv[1:]))' {opts} {packages}
usedevelop = True
passenv = *
setenv =
    ANSIBLE_CALLABLE_WHITELIST={env:ANSIBLE_CALLABLE_WHITELIST:timer,profile_roles}
    PYTHONDONTWRITEBYTECODE=1
    # -n auto used only on unit as is not supported by functional yet
    unit: PYTEST_ADDOPTS=test/unit/ --cov={toxinidir}/molecule/ --no-cov-on-fail {env:PYTEST_ADDOPTS:-n auto}
    functional: PYTEST_ADDOPTS=test/functional/ {env:PYTEST_ADDOPTS:}
deps =
    ansible25: ansible>=2.5,<2.6
    ansible26: ansible>=2.6,<2.7
    ansible27: ansible>=2.7,<2.8
    ansible28: ansible>=2.8,<2.9
    ansibledevel: git+https://github.com/ansible/ansible.git
extras =
    azure
    docker
    ec2
    gce
    hetznercloud
    linode
    lxc
    openstack
    vagrant
    windows
    test
commands_pre =
    find {toxinidir} -type f -not -path '{toxinidir}/.tox/*' -path '*/__pycache__/*' -name '*.py[c|o]' -delete
    sh -c 'find {homedir}/.cache -type d -path "*/molecule_*" -exec rm -rfv \{\} +;'
commands =
    python -m pytest {posargs}
whitelist_externals =
    find
    sh

[testenv:lint]
commands =
    # to run a single linter you can do "pre-commit run flake8"
    python -m pre_commit run {posargs:--all}
deps = pre-commit>=1.18.1
extras =
skip_install = true
usedevelop = false

[testenv:doc]
description = Invoke sphinx-build to build the HTML docs
# doc requires py3 due to use of f'' strings and using only python3 as
# basepython risks using python3.4 which is not supported.
basepython = python3.7
passenv = *
usedevelop = False
commands =
    python -m sphinx \
      -a -n -W \
      -b html --color \
      -d "{toxworkdir}/docs_doctree" \
      docs/ "{toxworkdir}/docs_out"

    # Print out the output docs dir and a way to serve html:
    python -c \
    'import pathlib; '\
    'docs_dir = pathlib.Path(r"{toxworkdir}") / "docs_out"; index_file = docs_dir / "index.html"; print(f"\nDocumentation available under `file://\{index_file\}`\n\nTo serve docs, use `python3 -m http.server --directory \{docs_dir\} 0`\n")'
extras =
    docs

# generic environment that should cover anything that is not a linter or a unit/functional test
[testenv:check]
# reuse existing envdir to avoid increased footprint
envdir = {toxworkdir}/py27-ansible25-unit
deps =
    {[testenv]deps}
    collective.checkdocs==0.2
    twine==1.13.0
usedevelop = False
# Ref: https://twitter.com/di_codes/status/1044358639081975813
commands =
    # verifies that pytest collection works without specific folders mentioned
    python -m pytest --collect-only
    # metadata validation
    python -m setup checkdocs check --metadata --restructuredtext --strict --verbose
    python -m twine check .tox/dist/*

[testenv:build-docker]
# skip under Windows
platform = ^darwin|^linux
# `usedevelop = True` overrided `skip_install` instruction, it's unwanted
usedevelop = False
# don't install Molecule in this env
skip_install = True
# don't install any Python dist deps
deps =
    setuptools_scm==3.3.3
    packaging
# reset pre-commands
commands_pre =
# build the docker container
commands =
    python ./utils/build-docker.py
whitelist_externals =
    sh

[testenv:build-dists-local]
description =
    Generate dists which may be not ready
    for upload to PyPI because of
    containing PEP440 local version part
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install molecule itself in this env
skip_install = true
deps =
    pep517 >= 0.5.0
setenv =
commands =
    python -m pep517.build \
      --source \
      --binary \
      --out-dir {toxinidir}/dist/ \
      {toxinidir}

[testenv:build-dists]
description = Generate dists ready for upload to PyPI
usedevelop = {[testenv:build-dists-local]usedevelop}
skip_install = {[testenv:build-dists-local]skip_install}
deps = {[testenv:build-dists-local]deps}
setenv =
    PYPI_UPLOAD = true
commands =
    rm -rfv {toxinidir}/dist/
    {[testenv:build-dists-local]commands}
whitelist_externals =
    rm
    {[testenv]whitelist_externals}
